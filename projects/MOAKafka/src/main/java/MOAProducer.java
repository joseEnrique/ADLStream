import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.yahoo.labs.samoa.instances.Instance;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.LongSerializer;
import org.apache.kafka.common.serialization.StringSerializer;
import streams.moagenerators.MOAStreamGenerator;

import java.util.Properties;
import java.util.UUID;
import java.util.concurrent.CountDownLatch;

public class MOAProducer {

    private final static String BOOTSTRAP_SERVERS = "localhost:9092";

    private static Producer<Long, String> createProducer() {
        Properties props = new Properties();
        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, BOOTSTRAP_SERVERS);
        props.put(ProducerConfig.CLIENT_ID_CONFIG, "MOAProducer_" + UUID.randomUUID().toString());
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, LongSerializer.class.getName());
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        return new KafkaProducer<>(props);
    }

    /**
     * @param topicName Topic name. If it does not exists, the program will create it on Kafka.
     * @param numInstances Number of instances that will be generated by the stream.
     * @param streamGeneratorName Generator name. Any class name included in the package moa.streams.generators.
     *                       For example: RandomRBFGenerator
     *                       See https://www.cs.waikato.ac.nz/~abifet/MOA/API/namespacemoa_1_1streams_1_1generators.html
     *
     */
    private static void runProducer(String topicName, long numInstances, String streamGeneratorName){
        final Producer<Long, String> producer = createProducer();

        MOAStreamGenerator stream = MOAStreamGeneratorFactory.getStreamGenerator(streamGeneratorName);
        stream.prepareForUse();

        ObjectMapper mapper = new ObjectMapper();
        mapper.setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY);

        long numSamples = 0;

        try {
            while (stream.hasMoreInstances() && (numInstances == -1 || numSamples < numInstances)) {
                long key = System.currentTimeMillis();
                Instance instance = stream.nextInstance().getData();
                JsonNode jsonNode = mapper.valueToTree(instance);
                ((ObjectNode)jsonNode).put("javaClass", instance.getClass().getName());
                String jsonValue = jsonNode.toString();
                // System.out.println(jsonValue);
                final ProducerRecord<Long, String> record = new ProducerRecord<>(topicName, key, jsonValue);
                producer.send(record);
                if (numInstances > 0) numSamples++;
            }
        } finally {
            producer.flush();
            producer.close();
        }
    }

    public static void main(String[] args) throws Exception{

        String topicName = "";
        String streamGeneratorName = "";
        long numInstances = -1;

        if (args.length == 3){
            topicName = args[0];
            System.out.println("Topic name: " + topicName);
            numInstances = Long.valueOf(args[1]);
            System.out.println(("Number instances: " + numInstances));
            streamGeneratorName = args[2];
            System.out.println("Stream generator name: " + streamGeneratorName);
        }else{
            System.out.println("Program arguments: [topicName] [numInstances] [streamGeneratorName]");
            System.out.println("-streamGeneratorName: Generator name. Any class name included in the package moa.streams.generators.\n" +
                    "For example: RandomRBFGenerator\n" +
                    "See https://www.cs.waikato.ac.nz/~abifet/MOA/API/namespacemoa_1_1streams_1_1generators.html");
            System.exit(1);
        }

        final CountDownLatch latch = new CountDownLatch(1);
        // attach shutdown handler to catch control-c
        Runtime.getRuntime().addShutdownHook(new Thread("streams-shutdown-hook") {
            @Override
            public void run() {
                latch.countDown();
            }
        });

        try {
            if(!KafkaUtils.existsTopic(topicName)){
                KafkaUtils.createTopic(topicName, 1,1);
            }
            runProducer(topicName, numInstances, streamGeneratorName);
            latch.await();
        } catch (Throwable e) {
            System.out.println(e.toString());
            System.exit(1);
        }
        System.exit(0);
    }

}
